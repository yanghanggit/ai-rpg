from abc import ABC, abstractmethod
from typing import Final


# 基础类，定义基本行为，其实是为了桥一下并做隔离
class BaseGame(ABC):

    def __init__(self, name: str) -> None:
        self._name: Final[str] = name
        self._will_exit: bool = False

    #######################################################################################################################################
    @property
    def name(self) -> str:
        return self._name

    #######################################################################################################################################
    @property
    def will_exit(self) -> bool:
        return self._will_exit

    #######################################################################################################################################
    @will_exit.setter
    def will_exit(self, value: bool) -> None:
        self._will_exit = value

    #######################################################################################################################################
    @abstractmethod
    def execute(self) -> None:
        pass

    #######################################################################################################################################
    @abstractmethod
    async def a_execute(self) -> None:
        pass

    #######################################################################################################################################
    @abstractmethod
    def exit(self) -> None:
        pass

    #######################################################################################################################################
