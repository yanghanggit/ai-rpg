from entitas import ExecuteProcessor, Matcher  # type: ignore
from overrides import override
from typing import List, final, cast
from game.tcg_game_context import TCGGameContext
from game.tcg_game import TCGGame
from loguru import logger
from components.components import  (
    ItemComponent,
    CardItemComponent,
)


#######################################################################################################################################
@final
class CombatStartSystem(ExecuteProcessor):

    def __init__(self, context: TCGGameContext) -> None:
        self._context: TCGGameContext = context
        self._game: TCGGame = cast(TCGGame, context._game)
        assert self._game is not None
        # 用于标识只让combat start执行一次，有了切换pipeline的逻辑之后加到那里 TODO
        self._done_flag = False

    
    #######################################################################################################################################
    @override
    def execute(self) -> None:
        if self._done_flag:
            return
        self._create_monster_deck()
        self._set_cards_to_deck()
        self._done_flag = True


    #######################################################################################################################################
    @override
    async def a_execute1(self) -> None:
        if self._done_flag:
            return
        await self._battle_cry()


    #######################################################################################################################################
    @override
    async def a_execute2(self) -> None:
        pass


    #######################################################################################################################################
    def _create_monster_deck(self) -> None:
        # TODO
        pass


    #######################################################################################################################################
    async def _battle_cry(self) -> None:
        # TODO
        logger.warning("这里该实现怪与英雄撂狠话")

    
    #######################################################################################################################################
    def _set_cards_to_deck(self) -> None:
        card_entities = self._context.get_group(
            Matcher(
                all_of=[
                    ItemComponent,
                    CardItemComponent,
                ]
            )
        ).entities
        
        if len(card_entities) == 0:
            return
        
        for card in card_entities:
            card.get(CardItemComponent).state = "Hand"