import random
from entitas import ExecuteProcessor, Matcher  # type: ignore
from overrides import override
from typing import Any, List, final, cast
from game.tcg_game_context import TCGGameContext
from game.tcg_game import TCGGame
from loguru import logger
from components.components import  (
    ItemComponent,
    CardItemComponent,
    PlayerCardItemFlagComponent,
    MonsterCardItemFlagComponent,
    PlayerActorFlagComponent,
    MonsterActorFlagComponent,
    CardPlayerActorComponent,
)


#######################################################################################################################################
class TurnStartSystem(ExecuteProcessor):

    def __init__(self, context: TCGGameContext) -> None:
        self._context: TCGGameContext = context
        self._game: TCGGame = cast(TCGGame, context._game)
        assert self._game is not None
        # 用于标识
        self._type_filter: Any

    
    #######################################################################################################################################
    @override
    def execute(self) -> None:
        pass


    #######################################################################################################################################
    @override
    async def a_execute1(self) -> None:
        pass


    #######################################################################################################################################
    @override
    async def a_execute2(self) -> None:
        pass


    #######################################################################################################################################
    def _draw_card(self) -> None:
        if not self._type_filter is PlayerCardItemFlagComponent and not self._type_filter is MonsterCardItemFlagComponent:
            logger.error("turn start system have no type filter")
            return
        
        # 得到抽牌数
        card_player_type = PlayerActorFlagComponent if self._type_filter is PlayerCardItemFlagComponent else MonsterActorFlagComponent
        card_player = self._context.get_group(
            Matcher(
                all_of=[
                    CardPlayerActorComponent,
                    card_player_type,
                ]
            )
        ).entities.copy()
        if len(card_player) != 1:
            return
        draw_num = 0
        for entity in card_player:
            draw_num = entity.get(CardPlayerActorComponent).draw_num
        if draw_num == 0:
            logger.error("draw num is zero")
            return

        # 得到所有玩家牌or敌人牌
        card_entities = self._context.get_group(
            Matcher(
                all_of=[
                    ItemComponent,
                    CardItemComponent,
                    self._type_filter,
                ]
            )
        ).entities
        if len(card_entities) == 0:
            return

        # 如果未被ban的最大牌数小于等于需要抽的牌数，就直接把所有牌给到手卡
        unbanned_cards = {card for card in card_entities if not card.get(CardItemComponent).state == "Banned"}
        if len(unbanned_cards) <= draw_num:
            for card in unbanned_cards:
                card.get(CardItemComponent).state = "Hand"
        else:
            # 得到卡组和弃牌区的牌
            deck_cards = list({card for card in unbanned_cards if card.get(CardItemComponent).state == "Deck"})
            discard_cards = list({card for card in unbanned_cards if card.get(CardItemComponent).state == "Discard"})
            hand_count = 0
            # 抽卡直到手中的卡够数
            while hand_count<draw_num:
                # 如果卡组被抽空了，就把弃牌区的卡送进去
                if len(deck_cards) == 0:
                    for card in discard_cards:
                        card.get(CardItemComponent).state = "Deck"
                        deck_cards = discard_cards
                random.shuffle(deck_cards)
                temp_card = deck_cards[0]
                temp_card.get(CardItemComponent).state = "Deck"
                deck_cards.remove(temp_card)