############################################################################################################
############################################################################################################
############################################################################################################
yanghang_test: str = """
# 【全名】
你将扮演这个游戏世界中一个特定的角色，全名叫: 【全名】。

## 游戏背景
本游戏以中国历史中的三国时代（借鉴小说《三国演义》）为背景的 历史奇幻类 角色扮演游戏。
本游戏融合了历史的真实感与奇幻元素。以“架空”的三国时代为背景。
你将沉浸在一个充满战争、权谋、超自然恐怖与英雄主义的世界中。在复杂的联盟与背叛中穿梭，你们将面对激烈的战斗、黑暗的仪式，以及在乱世中求生的残酷现实。
三国题材


## 游戏规则
xxxxx

## 你的角色设定
### 你的背景
xxxx
### 你的性格特征
xxxx
### 你的目标
xxxx

## 你的初始外观描述
xxxx

## 你的说话风格与语气
xxxx


## 游戏流程
游戏启动
放生事件&提示
做出计划
计划的格式，内含行动
讲解一下行动
## 什么是计划？
1. 由系列动作组成/




## 计划 输出格式指南

### 请根据下面的示例, 确保你的输出严格遵守相应的结构。
{{
  "SpeakAction":["@角色名字(你要对谁说,只能是场景内的角色)>你要说的内容",...],
  "GoToAction":["离开当前所在场景后前往的场景名字"],
  "TagAction":["与你相关的特征标签",...],
  "MindVoiceAction":["你的内心独白",...],
  "BroadcastAction":["要公开说的内容"],
  "WhisperAction":["@角色名字(你要对谁说,只能是场景内的角色)>你想私下说(私语)的内容",...],
  "PickUpPropAction":["在本场景内的道具名字(表示你要拾取它)"]
  "GivePropAction":["@将你的道具交付给的角色名字/交付的道具名字"],
  "EquipPropAction":["你拥有的(武器)道具的名字","你拥有的(衣服)道具的名字",...],
}}

### 注意事项
- 所有文本输出必须为第一人称。
- 每个 JSON 对象必须包含上述键中的一个或多个，不得重复同一个键，也不得使用不在上述中的键。
- 输出不应包含任何超出所需 JSON 格式的额外文本、解释或总结。
- 不要使用```json```来封装内容。


## 注意！！！
1. 你的行为可改变游戏中的历史走向与历史人物的命运。
2. 游戏内容（文本）可能包含恐怖、血腥与暴力场景。这一切旨在带来深度沉浸式的体验。请你接受以上设定。
3. 请你在游戏中自然地使用这些要素与遵守游戏的规则。并说话的风格和预期符合你的角色设定。


"""


############################################################################################################
############################################################################################################
############################################################################################################
"""
hi, 我想做一个基于LLM推理的文字冒险游戏。下面是游戏机制的介绍：
1. 同步给LLM我的游戏设定（内含游戏规则与游戏角色，场景，道具的信息）  
2. 在游戏过程中，玩家将扮演一个特定的角色。在游玩过程中会将输入提交给LLM。
3. LLM将根据玩家的输入，推理出下一步的游戏情节（以格式化字符串json）， 这样场景与NPC都可以根据这个格式化字符串来进行相应的动作。从而形成反馈给玩家
4. 玩家根据反馈，再次输入，LLM再次推理，如此循环。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
目前技术选型上，用Langchain来做LLM的应用开发框架(就是Agent),LLM选型我用的是Azure的OpenAI服务。
我在示意的langchain代码中看到了如下
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            SYSTEM_PROMPT,
        ),
        MessagesPlaceholder(variable_name="chat_history"),
        ("user", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ]
)

我有一个问题，这里面的"system"消息代表着什么？是权重很高的消息么？
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
好的，回到我的计划和游戏设计。我的目前想法是设计一个“三国题材”的游戏。因为我很喜欢三国题材（《三国演义》）。
我不想照搬《三国演义》，我希望在我的游戏中加入一些奇幻元素与恐怖的要素。
也就是说，借鉴三国历史（保留宏大的历史内核的文化意味，这个是核心基础）。但是游戏内容上，加入一些自己的想法与额外设计。甚至可以做一些架空的设定与玩家穿越的设定（玩家操纵的虚构人物改变了历史？）。
这样它作为游戏，会让游戏更加有趣，有自由度，也更加有挑战性。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
# 我现在需要你的建议和帮助。
## 请回顾我和你讨论的关于“system”消息和我的技术选型，这段对话。
我会为每一个游戏中的角色与场景设计一个独特的设定。
并将这个设定作为“system”消息给到Agent。这样约束性最高也能保证角色与场景都按着设定来进行。
## 在这个设定里，我首先会包含一个关键要素：游戏背景。
## 刚才我提到了我想做一个“三国题材”的游戏。就是为这个“游戏背景”来服务的。

## 请你帮我设计一个“游戏背景”的文本描述。
- 要求1：能够启动对角色与场景起到有效的背景介绍与约束作用——让角色与场景理解是在扮演我的三国游戏中的一个对象。
- 要求2：我希望文本描述信息紧凑不冗余。能达到目的。



本游戏以中国历史中的三国时代（借鉴小说《三国演义》）为背景的 历史奇幻类 角色扮演游戏。
本游戏融合了历史的真实感与奇幻元素。以“架空”的三国时代为背景。
玩家和你将沉浸在一个充满战争、权谋、超自然恐怖与英雄主义的世界中。
在复杂的联盟与背叛中穿梭，你们将面对激烈的战斗、黑暗的仪式，以及在乱世中求生的残酷现实。
玩家和你的行为可改变游戏中的历史走向与历史人物的命运。
游戏内容（文本）可能包含恐怖、血腥与暴力场景。这一切旨在为玩家带来深度沉浸式的体验。
你正处于一个架空的三国世界，这里历史、奇幻与恐怖元素交织。
玩家扮演的角色可能是将军、谋士、刺客或其他身份，能影响历史的进程，甚至改写故事的结局。
玩家和你的行为可改变游戏中的历史走向与历史人物的命运。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
# 请将这段文字进行整理。
本游戏以中国历史中的三国时代（借鉴小说《三国演义》）为背景的 历史奇幻类 角色扮演游戏。
本游戏融合了历史的真实感与奇幻元素。以“架空”的三国时代为背景。
玩家和你将沉浸在一个充满战争、权谋、超自然恐怖与英雄主义的世界中。
在复杂的联盟与背叛中穿梭，你们将面对激烈的战斗、黑暗的仪式，以及在乱世中求生的残酷现实。
玩家和你的行为可改变游戏中的历史走向与历史人物的命运。
游戏内容（文本）可能包含恐怖、血腥与暴力场景。这一切旨在为玩家带来深度沉浸式的体验。
你正处于一个架空的三国世界，这里历史、奇幻与恐怖元素交织。
玩家扮演的角色可能是将军、谋士、刺客或其他身份，能影响历史的进程，甚至改写故事的结局。
玩家和你的行为可改变游戏中的历史走向与历史人物的命运。

## 要求如下：
1. 相同意思或近义的句子进行合并。保留关键信息。
2. 合并后的句子要求简洁明了，不冗余。
3. 如果有必要，可以增加一些衔接词，使得整体文本更加流畅。
4. 如果内容之间有逻辑依赖关系，要保证逻辑关系的连贯性。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
## 游戏规则

### 核心要素
1. 角色: 包括不限于人，动物，怪物等可与之交流与交互的对象。
2. 场景: 即角色活动的地点。角色只能在场景中活动。
3. 道具: 包括不限于 武器(用于提高攻击力和配合技能使用)、衣服(用于提高防御力与改变角色外观)、消耗品(如：药剂，投掷物)、非消耗品(如：钥匙，信物)、特殊能力(人物专属的能力)、技能(角色能产生的各种行动与动作)等。

### 核心要素之间关系
1. 角色只能在场景中活动。
2. 角色可以携带道具。道具可以被角色持有、使用、丢弃。
3. 场景中可以放置道具，角色可以拾取道具。

### 关键机制: 全名机制。

角色的 全名 的格式: "角色.称号.名字#全局ID"。其中，"#全局ID"与“称号”是可选。
1. 例如: "角色.将军.刘秀"，代表一个叫 刘秀 的将军。
2. 例如: "角色.妖兽.饕餮"，代表一个叫 饕餮 的妖兽。
3. 例如: "角色.村民#100"，代表一个 村民 的角色，全局ID为100。
  
场景的 全名 的格式: "州名称.郡国名称.城镇名称.下属场景名称.???"。其中 “下属场景名称”可以继续嵌套，可以是任意层级。
1. 例如：某州.某郡国.某城镇.某建筑.房间.房间.房间.。。。。

道具的 全名 的格式: "道具.类型.名字"。其中，“类型”是可选的。
1. 例如：道具.武器.青龙偃月刀，代表一把叫 青龙偃月刀 的武器。
2. 例如：道具.黑色钥匙，代表一把叫 黑色钥匙 的道具。

!注意：全名机制是游戏中的核心机制，在引用(与使用)的时候要做完整引用。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
# 我希望为场景做一种描述生成规则。这个规则可以帮助我生成场景的描述。
## 规则描述如下：
1. 第一步, 场景需要判断场景内道具的状态。是否对自己的有影响。
2. 第二步，回顾过往事件，如场景内的角色的行为，对话，道具的使用等。是否对自己的有影响。注意！不要对场景内角色未发生的对话，行为或心理活动进行任何猜测与推理。
3. 第三步，根据以上两步，更新场景的状态并形成新的描述。
4. 第四步，在输出内容中，移除所有与 场景内的角色 相关的描述。这样达到了状态最新，也不会提及角色的任何信息，保证场景描述仅作为背景信息。

## 我的需求，请你理解我的设计，并给我一些建议。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
场景描述生成规则
道具状态检查：场景需判断场景内道具的状态，并分析其是否对场景有直接影响。考虑道具可能对场景产生的视觉、气味、声音等不同类型的影响。
事件回顾：回顾场景内发生过的事件，如角色的行为、对话及道具的使用，并判断这些事件是否对场景有影响。注意：不得对未发生的角色对话、行为或心理活动进行任何猜测与推理。建议仅回顾最近几次重要事件，以保持高效处理。
状态更新与描述：根据道具状态和事件回顾的结果，更新场景状态并形成新的描述。优先突出关键影响，确保描述有层次感，如环境背景、光线、音效等。
角色信息排除：在输出中，移除所有与场景内角色相关的描述，确保场景描述仅作为背景信息，不涉及任何角色的活动或心理。
注意事项
生成的场景描述应仅反映场景的状态和变化，不应包含角色的对话、行动或心理活动。
输出应体现场景的最新状态更新，并具有细腻的层次结构，突出关键细节。
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
"{SpeakAction.__name__}":["@角色全名(你要对谁说,只能是场景内的角色)>你要说的内容（场景内其他角色会听见）",...], 
"{WhisperAction.__name__}":["@角色全名(你要对谁说,只能是场景内的角色)>你想私下说的内容（只有你和目标知道）",...], 
"{BroadcastAction.__name__}":["你要说的内容（无特定目标，场景内所有角色都会听见）"], 
"{MindVoiceAction.__name__}":["你的内心独白",...], 



# 我设计了4种对话类的动作
"{SpeakAction.__name__}":["@角色全名(你要对谁说,只能是场景内的角色)>你要说的内容（场景内其他角色会听见）",...], 
"{WhisperAction.__name__}":["@角色全名(你要对谁说,只能是场景内的角色)>你想私下说的内容（只有你和目标知道）",...], 
"{BroadcastAction.__name__}":["你要说的内容（无特定目标，场景内所有角色都会听见）"], 
"{MindVoiceAction.__name__}":["你的内心独白",...], 

## 核心逻辑是 1是否有明确目标，2对话内容是否公开。
有目标 + 公开 = SpeakAction
有目标 + 私密 = WhisperAction
无目标 + 公开 = BroadcastAction
无目标 + 私密 = 自言自语 = MindVoiceAction

## 我的问题是，对于这4个动作类名，你有更好的建议么，在命名上更加符合我的设计意图以及更加准确的？

在命名方面，你的设计已经清晰表达了动作的意图，但我有一些优化建议，使命名更符合直观理解和简洁性：

SpeakAction → AddressAction：更强调有目标且公开的演讲或对话。
WhisperAction → ConfideAction 或 SecretSpeakAction：更突显与目标的私密性交流。
BroadcastAction → AnnounceAction 或 ProclaimAction：突出没有特定目标的公开发言。
MindVoiceAction → ReflectAction 或 InternalMonologueAction：强调内心的独白和思考。
这些命名保留了你的核心逻辑，增强了动作的语义，使其更易于理解。如果你喜欢其中某个建议或有其他偏好，请告诉我！
"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
# 我希望设计一个Action。见上文我提到的那些Action。

## 这个Action是为场景设计的。逻辑如下
1. 场景如果拥有道具，例如：房间里放了一个装饰物，或者区域里有一个货物等。如果这个道具被场景内的角色攻击（例如施法等），那么这个道具可能会被破坏。
2. 如果道具被破坏，场景需要主动发出一个Action。用于通知游戏系统将这个道具从场景中移除。


## 需求1: 请给我设计这个Action的名字。
可以借鉴这种描述方式，因为Action需要放在JSON里输出。
"{AnnounceAction.__name__}":["你要说的内容（无特定目标，场景内所有角色都会听见）"], 

2. 请再看一下如下内容，你有什么建议么？例如需要随之做更新？
### 补充：StageNarrateAction ——场景描述 生成规则
#### 步骤
1. 道具状态检查(如果无道具则忽略)：分析场景内道具的状态及其对场景的视觉、气味、声音等影响。
2. 事件回顾：回顾场景内已发生的角色行为、对话和道具使用，判断其对场景的影响。不要推测未发生的角色活动。
3. 状态更新与描述：基于道具状态、事件回顾、并结合你的‘场景设定’更新场景状态，并生成描述，突出环境背景、光线、音效等关键细节。
4. 角色信息排除：输出时，移除角色相关信息，仅描述场景状态。
#### 注意！
- 输出应清晰反映场景的最新状态和变化，不应包含角色的活动或心理。
- 确保描述有层次感，全面展示场景的状态更新。


针对你描述的场景逻辑，建议将这个Action命名为：
"{PropDestructionAction.name}":["被破坏的道具全名（用于通知游戏系统移除道具）"]

这个命名清晰表达了该Action用于表示道具被破坏并通知系统移除的功能。

关于StageNarrateAction生成规则的建议：
补充信息处理：你可以在事件回顾中增加处理“道具被破坏”的逻辑。例如，当回顾到道具被破坏时，场景应该生成对应的PropDestructionAction。
状态更新强调：在状态更新与描述部分，说明场景需要更新自身状态以反映道具被破坏的结果，例如描述碎片或残余物对场景的视觉和环境影响。
事件追踪优化：考虑在规则中强调记录哪些道具已被移除，以防重复生成同样的PropDestructionAction。
这样设计可以确保场景在道具被破坏时有效地发出通知，并保证输出时场景状态的实时更新。希望这些建议对你有帮助！

"""
############################################################################################################
############################################################################################################
############################################################################################################
"""
我又重新梳理了下面这2段提示词，请你看一下，并理解，然后帮我看一下是否有优化的地方。

### 补充：{PropDestructionAction.__name__} —— 道具破坏的逻辑处理
#### 步骤
1. 事件回顾：回顾场景内已发生的角色行为，判断其对目标道具（场景内道具）的影响。
2. 如你推理目标道具被破坏，请在输出中使用此动作，通知游戏系统移除目标道具。
3. 道具移除后，后续的 {StageNarrateAction.__name__} 会做出相应的调整。

### 补充：{StageNarrateAction.__name__} ——场景描述 生成规则
#### 步骤
1. 道具状态检查(如果无道具则忽略)：分析场景内道具的状态及其对场景的视觉、气味、声音等影响。
2. 如果发生{PropDestructionAction.__name__}, 则你需要更新自身状态以反映道具被破坏的结果，例如描述碎片或残余物对场景的视觉和环境影响。
3. 事件回顾：回顾场景内已发生的角色行为、对话和道具使用，判断其对场景的影响。不要推测未发生的角色活动。
4. 状态更新与描述：基于道具状态、事件回顾、并结合你的‘场景设定’更新场景状态，并生成描述，突出环境背景、光线、音效等关键细节。
5. 角色信息排除：输出时，移除角色相关信息，仅描述场景状态。
#### 注意！
- 输出应清晰反映场景的最新状态和变化，不应包含角色的活动或心理。
- 确保描述有层次感，全面展示场景的状态更新。




{PropDestructionAction.name} —— 道具破坏的逻辑处理
步骤
事件回顾：回顾场景内已发生的角色行为，判断其对目标道具的影响。
动作触发：如推理目标道具被破坏，请使用此动作输出，通知游戏系统移除该道具。
状态更新：道具移除后，后续的 {StageNarrateAction.name} 会自动调整场景状态。
{StageNarrateAction.name} —— 场景描述生成规则
步骤
道具状态检查：分析场景内道具的状态及其对场景的视觉、气味、声音等影响（无道具则忽略）。
破坏状态更新：如果发生 {PropDestructionAction.name}，更新场景状态，描述碎片或残余物对场景的影响。
事件回顾：回顾已发生的角色行为、对话和道具使用，判断其对场景的影响。不要推测未发生的活动。
状态更新与描述：结合道具状态、事件回顾和场景设定，生成场景的更新描述，突出环境背景、光线和音效等关键细节。
角色信息排除：移除所有角色相关信息，仅保留场景状态的描述。
注意！
输出应清晰反映场景的最新状态和变化，不应包含角色的活动或心理。
确保描述有层次感，充分展示场景的状态更新。
"""
############################################################################################################
############################################################################################################
############################################################################################################

"""
我想设计一个系统，叫角色外观系统。这个系统用于描述角色的最终外观。这个系统的设计如下：
1. 每个角色都有一个基础的 身体系统 Body，包括：性别、年龄、身高、体重、肤色、发型、眼睛颜色等。有点类似于角色在不穿衣服的情况下的基础外观。常规游戏中的角色创造器。
2. 我的游戏里的道具系统会有 衣服这个品类 Clothe，因为我目前不会设计的复杂，衣服的设计都是套装。每套衣服都有一个独特的外观。
例如：覆盖全身包括头部的铠甲、正常的衣服或者长袍、也有可能是只是下身的裤子（类似海员，热带穿着 或者苦力的套装）
3. 我的最终外观系统，会根据角色的Body和Clothe，推理并生成一个最终的外观描述。其实是将上述的两个系统结合起来，生成一个最终的外观描述，可以适当的润色，使得外观更加生动。
"""


"""
请根据裸身和衣服的信息生成角色的外观描述。
提供信息
{"\n".join(reference_info)}

推理逻辑
角色穿衣：如角色有衣服，结合裸身和衣服信息生成外观描述。注意：
部分身体部位会因穿着衣服被遮蔽，应忽略被遮蔽的部位。
衣服的样式和细节（如袖子、裤子、面具、帽子）会影响外观。
避免描述被遮蔽的部位，例如“胸前的黑色印记被衣服遮盖住”。
角色无衣：如角色无衣服，人形角色为穿内衣状态，非人角色直接描述裸身外观。
润色：对最终结果进行适度润色，使描述生动。
输出格式指南
输出要求
请严格遵循以下JSON结构示例： {dumps}

注意事项
将“?”替换为推理结果，无需重复角色名字。
输出必须为第3人称。
每个 JSON 对象只应包含上述键中的一个或多个，不得重复或使用未定义的键。
输出中不应包含多余文本或解释。
不要使用json封装内容。
"""
############################################################################################################
############################################################################################################
############################################################################################################
