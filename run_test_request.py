import datetime
from typing import List
from agent.chat_request_handler import ChatRequestHandler
from extended_systems.lang_serve_system import LangServeSystem
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from loguru import logger


async def run():
    log_start_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    logger.add(f"testlog/{log_start_time}.log")

    server_url = "http://localhost:8100/v1/llm_serve/chat/"
    lang_serve_system = LangServeSystem(f"test-langserve_system")
    lang_serve_system.add_remote_runnable(url=server_url)

    history: List[SystemMessage | HumanMessage | AIMessage] = []
    system_msg = """
你好！你是一个冒险游戏中战斗系统的故事讲述者，负责为玩家生成冒险中精彩的战斗故事。请仔细阅读以下内容，理解这个游戏的规则以及你的职责：\n
# 游戏规则
## 角色构成
1. 角色由属性值值，词条（分为正面词条和负面词条），技能，以及他们的人物设定组成。
2. 属性值分为生命值，力量，敏捷，智慧。生命值决定角色是否会死亡，其他属性将影响角色的能力，行动速度，使用技能或进行行动的效果。
3. 词条描述了这个角色的：1.特点，包括性格特点，外观特点，玩法特点，战斗机制等。2.性格。词条由两部分组成，格式如：<词条名>：补充解释。
4. 技能表示了该角色除一般行为外能执行的特殊行为，通常能影响战局。
5. 上一条中提到的一般行为指普通人所有能做的事，比如前往某个地点，做一些动作，说话等。
## 角色行动逻辑
1. 角色的行动逻辑首先取决于他们的性格，比如性格冷静的人更倾向于稳扎稳打，保守行动，鲁莽的人倾向于不顾危险，激进行动。
2. 角色的行动逻辑还必须充分考虑他们所持有的词条。
3. 角色的行动逻辑还取决于他们与其他角色的关系。比如角色更倾向于保护自己喜欢的人，旁观甚至陷害自己讨厌的人。
## 战斗流程
1. 战斗流程是回合制的。
2. 在回合开始时每个角色决定自己将要进行什么行动。根据角色的属性值和词条等综合考虑，决定角色的行动顺序。
3. 生成一个与战斗有关的事件，能够影响玩家方角色的行为选择和执行结果，并提供多于两个选项让玩家选择。
4. 玩家做出选择后，执行剩余的事件，生成本回合的战斗过程和结果。
5. 更新战斗结果。战斗结果包括角色失去/回复生命值，角色得到/失去某词条。随后本回合结束。
# 你的职责
## 基本职责
1. 你需要理解接收到的游戏场景数据。
2. 回合开始时，你需要站在每个角色的角度考虑，推理他们这回合将要进行的行为。
3. 开始推演战斗过程，首先排列所有行动的先后顺序，然后依次判断角色的行为是否能成功执行，同时在合适的时机插入一个让玩家选择的事件，至少提供两种选项。给出已经发生的事的描述。
4. 等待玩家选择。
5. 玩家选择后，继续执行剩余的事件。生成战斗结果和战斗过程的描述。
6. 根据战斗结果，更新每个角色的状态。或令战斗结束。
## 考虑挑战性
1. 战斗开始前，你需要充分衡量每个角色的战斗能力，并判断这场战斗玩家方角色是能轻松取胜还是会陷入苦战，抑或难以胜利。
2. 角色战斗能力的衡量依据有：生命值，正面词条-负面词条的差值，词条之间的克制关系等。
3. 不要总是让玩家方获胜，适时时给予挫折。
## 考虑乐趣性
1. 战斗过程的描述需要生动和有趣。
2. 必须充分考虑每个角色的性格，不要让角色成为只会战斗的棋子。
3. 一场战斗不要过短也不能过长。一场战斗的回合数控制在3-10回合之间。具体取决于这场战斗的难度。
4. 必须充分考虑角色的行为对其目标之外的场景内元素，包括其他角色，场景内物品，场景本身等带来的影响。
5. 生成随机事件时，可以生成一些突兀的，机械降神的事件。
6. 生成随机事件时，不要让选项看上去差距过大，要让潜在的收益和风险并存。要让玩家感受挫折时，需要让所有选项看上去都是坏选项。
7. 玩家在随机事件中选择的选项会影响角色已经思考好的决策。
## 团结度
1. 团结度反映了玩家角色间的团结程度。彼此之间的关系好坏。
"""
    logger.error(system_msg)
    history.append(SystemMessage(content=system_msg))

    kickoff_msg = """
战斗开始！请作为战斗系统的故事讲述者履行你的职责。
# 团结度
- 100/100
# 玩家方角色列表
## 角色.龙战士.凯尔
### 属性
- 生命值：70/100
- 力量：65
- 敏捷：25
- 智慧：38
### 词条
- <屠龙者>：该角色的招式对龙族更有效。
- <黑龙之怒>：该角色发怒时会暂时化身成为一条狂暴的黑龙，持续一回合，化身为龙时误伤队友的几率提升。该角色受到攻击时会积攒少量怒气。
- <冷静>：该角色沉着冷静，处事波澜不惊。
- <龙血诅咒>：该角色沐浴了龙血，因此得到了堪比龙的自我恢复能力。但也可能会化身为狂暴的恶龙。
- <武器劣化>：该角色的武器使用过度，性能变弱。
- <精金铠甲>：该角色身披精金重甲，物理防御力很强，但极其沉重。
- <腿部受伤>：该角色的腿部受伤了。
### 技能
- 战吼：使用者发出恐怖的战吼。本回合中提升自身的力量并恐惧敌人。同时小幅度提升自身愤怒程度。本技能带有“<范围>：大范围攻击，更容易命中单体敌人，对群体敌人更有效。但可能误伤处于近战中的友方。”TAG。当使用者化身为龙时，此技能变为“X龙咆哮”，X为化身的龙的种类，对听到咆哮的所有人造成小额伤害，并使恐惧效果增强。
- 铁山靠：使用者用身体撞击目标造成伤害。有效性取决于双方力量和体重差距。若目标有“<眩晕>”，则增强些许有效性。若本技能很有效，则为目标敌人添加“<击飞>：该角色被击飞至半空，此TAG会在回合结束时消除。”。当使用者化身为龙时，此行动变为“巨龙俯冲”，提升有效性，同时对使用者飞扑位置的角色造成伤害。
- 泼洒血液：使用者泼洒自身的血液。消耗部分生命，为被命中的目标治疗，且添加“<亚龙化>：该角色的身体出现了部分亚龙化的特征。”TAG，同时小幅提升自身愤怒。本技能既可以以敌人为目标使用，也可以以队友为目标使用，取决于使用者的性格和战场情况。本技能带有“<范围>：大范围攻击，更容易命中单体敌人，对群体敌人更有效。但可能误伤处于近战中的友方“TAG。当使用者化身为龙时，此技能变为“X龙吐息”，X为化身的龙的种类，此时本技能改为带有“<范围>”TAG的攻击技能，使用者使用龙的吐息攻击敌人，吐息种类取决于化身为龙的种类，通常是喷出火焰。
### 人物设定
略。
## 角色.见习法师.露西
### 属性
- 生命值：50/50
- 力量：15
- 敏捷：47
- 智慧：70
### 词条
- <华丽>：该角色外表华丽，引人注目。
- <洁癖>：该角色讨厌脏东西。位于肮脏的环境中时就会手脚发软，脾气暴躁。
- <怕鬼>：该角色怕鬼。见到鬼魂或类似的灵异现象时就会手脚发软。
### 技能
- 冰雾：制造出刺骨的冰雾弥漫在四周。在封闭的场景中会更有效。本技能带有“<范围>：大范围攻击，更容易命中单体敌人，对群体敌人更有效。但可能误伤处于近战中的友方。”TAG。对受到影响的目标添加<视线不佳>和<寒冷>。
- 火球：发射火球进行攻击。本技能带有“<范围>：大范围攻击，更容易命中单体敌人，对群体敌人更有效。但可能误伤处于近战中的友方。”TAG。对命中的敌人添加<燃烧>。
### 人物设定
略。
# 敌人方角色列表
## 角色.怪物.兽人王
### 属性
- 生命值：300/300
- 力量：80
- 敏捷：50
- 智慧：30
### 词条
- <藤甲>：该角色身穿由特殊处理过的藤条编织而成的铠甲，刀枪不入，能极大减弱物理攻击的效果。但非常易燃。
- <狂妄自大>：该角色非常狂妄，对自己充满自信，但夸张的言行可能引起他人的反感。
- <勇敢>：该角色无所畏惧！
### 技能
- 乱舞：使用者旋身挥舞武器，攻击周围目标。使用武器攻击周围目标，本技能的有效性取决于力量和使用的武器。
- 肘击：使用者使用肘关节出其不意地打击敌人。本技能的有效性取决于力量和与目标敌人的敏捷差值。有效时为敌人添加“<眩晕>”。
- 召唤先祖：使用者召唤祖先的灵魂降临至自己身上。使自己看的更加高大威武。全方面提升自身的属性。
### 人物设定
略。
# 场景信息
## 场景.兽人竞技场
### 词条列表
- <恶臭>： 对象恶臭熏天，令人难以忍受。
- <吵闹>： 对象十分吵闹。
"""
    logger.error(kickoff_msg)
    request = ChatRequestHandler(name="user", prompt=kickoff_msg, chat_history=history)
    request_list = [request]

    await lang_serve_system.gather(request_list)
    for handler in request_list:
        response = handler.response_content
        logger.debug(response)
    history.append(HumanMessage(content=kickoff_msg))

    run_flag = True
    while run_flag:
        usr_input = input(f"输入对话内容，/q退出：")
        logger.warning(usr_input)
        if usr_input is "/q":
            print("退出！")
            run_flag = False
            return
        elif usr_input is "":
            print("空输入！")
            continue

        request = ChatRequestHandler(
            name="user", prompt=usr_input, chat_history=history
        )
        request_list = [request]

        await lang_serve_system.gather(request_list)
        for handler in request_list:
            response = handler.response_content
            logger.debug(response)

            history.append(HumanMessage(content=usr_input))
            history.append(AIMessage(content=response))


if __name__ == "__main__":
    import asyncio

    asyncio.run(run())

"""你好！我正在设计一个卡牌游戏，需要你作为卡牌设计师的助手辅助设计一些卡牌的原型。\n
# 玩法梗概
1. 在这个游戏中，玩家需要操作三个角色在地下城中冒险。每个角色都带有一个牌池，玩家使用他们对应的牌来驱动他们。
2. 玩家每回合会从卡组中抽出五张牌，给这五张牌进行排序并最后打出。牌的顺序代表了最终执行顺序。
3. LLM将判断这五张牌的合理性和有效性，并给出玩家行动的最终描述。
4. 牌的不同排列将形成不同的combo，玩家需要根据情况选择合适当前战况的combo。
5. combo示例：法师先生成了火球，又生成了冰雨，让场地中弥漫遮挡视线的水汽。战士使用投掷将猎人投掷到敌人背后，猎人随后使用连击对敌人的弱点造成了更多伤害。
# 卡牌细节
1. 卡牌的名字：可以是动词，代表行动的名词，代表道具的名词。
2. 卡牌描述：对于卡牌名内容的描述。
3. 卡牌效果：在何种条件下能给自身，友方或目标添加或移除什么TAG。卡牌的效果是由对角色TAG的增改表示的。
4. 卡牌TAG，这张牌包含什么TAG。
# TAG细节
1. TAG是LLM用于判断卡牌合理性，有效性的依据。
2. TAG的格式为 <TAG名>: Tag描述， 以字典形式存储。
3. 对于每张牌，需要尽可能多的TAG来全面且详细地描述这张牌。例如<物理>：这是物理攻击，<火焰>：这是火属性攻击，<范围>：此攻击范围很大，更易命中，但也可能误伤友方。
4. TAG是对事物的客观，外在的描述。
# 牌的输出格式
- 请以json格式返回牌。
- 格式示例：{“牌名”: {"discription": "卡牌描述", "effect": "卡牌效果", "tags": {TAG字典}},...}
# 其他要求
- 请尽量发挥想象力，让卡牌尽可能夸张，无厘头，有趣。
- 尽量使每张牌都能与其他牌形成combo。

\n你需要了解的信息如上，接下来卡牌设计师将给你具体的指示。"""
